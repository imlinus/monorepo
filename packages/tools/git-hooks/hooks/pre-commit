#!/usr/bin/env node

/* generated by corgy */

'use strict'

let child = require('child_process')
let fmt = require('util').format
let path = require('path')

let command = path.basename(__filename)

child.exec('git rev-parse --show-toplevel', (err, stdout) => {
  if (err) return error(err)

  let root = stdout.trim()
  let pkg

  try {
    pkg = require(path.join(root, 'package.json'))
  } catch (err) {
    return error(err)
  }

  if (
    !pkg ||
    !pkg['hooks'] ||
    !pkg['hooks'][command] ||
    !pkg['hooks'][command].length
  ) return

  run(root, pkg['hooks'][command])
})

const run = (root, tasks) => {
  if (typeof tasks === 'string') tasks = [tasks]
  if (!Array.isArray(tasks)) return error(new Error('hooks.' + command + ' in package.json must be string or array'))

  next()

  function next () {
    if (tasks.length === 0) return

    let task = tasks.shift()
    let c = child.spawn(task, { cwd: root, stdio: 'inherit', shell: true })

    c.on('exit', code => {
      if (code !== 0) return error(new Error(fmt('task `%s` exit with code %s', task, code)))
      next()
    })
  }
}

const error = err => {
  if (err.task) console.error('[%s] run `%s` error', command, err.task)
  console.error('[%s] Error Stack:\n%s', command, err.stack.replace(/^/gm, '  '))
  process.exit(1)
}
